image: "python:3.8-buster"

stages:
  - build
  - test
  - deploy
  - cleanup

build:
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://localhost:2375
    CI_DEBUG_TRACE: "false"
  services:
    - name: docker:19.03.12-dind
      command: ["--mtu=1450"]
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - whoami
    - eval $(ssh-agent -s)

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo $SSH_PRIVATE_KEY
    - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - ls -la ~/.ssh
    - chmod 700 ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - echo -e "Host gitlab.com\n
      Hostname altssh.gitlab.com\n
      User git\n
      Port 443\n
      PreferredAuthentications publickey\n
      IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config\n
    - cat ~/.ssh/config\n
    #- echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - echo -n "$SSH_PRIVATE_KEY" | ssh-add - > /dev/null
    #- cat /root/.ssh/id_ed25519 | ssh-add -
    #- cat /root/.ssh/id_ed25519
    #- ssh-add -L
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - cd ~/.ssh
    - pwd
    - ls -la
    #- chmod 600 ~/.ssh/id_rsa
    #- cat /root/.ssh/id_rsa
   # - echo -e "Host gitlab.com\n\tStrictHostKeyChecking no\n\tUser git\n\tIdentityFile /root/.ssh/id_rsa\n\n" > /root/.ssh/config
    #- cat /root/.ssh/config
    - ssh -Tvvv -i ~/.ssh/id_rsa git@gitlab.com
    - git clone -v --no-single-branch --progress git@gitlab.com:acdh-oeaw/elexis/mwsa_model.git
    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    # - git config --global user.email "user@example.com"
    # - git config --global user.name "User name"
  script:
    - touch ~/.gitconfig
    - git config --list
    - echo $CI_DEPLOY_USER
    - pip install "dvc[gs]"==2.0.18
    - dvc pull -v
    - export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
      export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - export
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG .
    - docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG

