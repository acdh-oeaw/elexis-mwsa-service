# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Scores(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alignment: str=None, probability: float=None):  # noqa: E501
        """Scores - a model defined in Swagger

        :param alignment: The alignment of this Scores.  # noqa: E501
        :type alignment: str
        :param probability: The probability of this Scores.  # noqa: E501
        :type probability: float
        """
        self.swagger_types = {
            'alignment': str,
            'probability': float
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'probability': 'probability'
        }
        self._alignment = alignment
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt) -> 'Scores':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scores of this Scores.  # noqa: E501
        :rtype: Scores
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self) -> str:
        """Gets the alignment of this Scores.

        alignment of definition pair. 'exact', 'related', 'broader', 'narrower', 'none'  # noqa: E501

        :return: The alignment of this Scores.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment: str):
        """Sets the alignment of this Scores.

        alignment of definition pair. 'exact', 'related', 'broader', 'narrower', 'none'  # noqa: E501

        :param alignment: The alignment of this Scores.
        :type alignment: str
        """

        self._alignment = alignment

    @property
    def probability(self) -> float:
        """Gets the probability of this Scores.

        probability of the pairs for the alignment  # noqa: E501

        :return: The probability of this Scores.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability: float):
        """Sets the probability of this Scores.

        probability of the pairs for the alignment  # noqa: E501

        :param probability: The probability of this Scores.
        :type probability: float
        """

        self._probability = probability
