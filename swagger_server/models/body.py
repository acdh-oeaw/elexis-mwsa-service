# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.definition_pair import DefinitionPair  # noqa: F401,E501
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, classifier: str=None, pair: DefinitionPair=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param classifier: The classifier of this Body.  # noqa: E501
        :type classifier: str
        :param pair: The pair of this Body.  # noqa: E501
        :type pair: DefinitionPair
        """
        self.swagger_types = {
            'classifier': str,
            'pair': DefinitionPair
        }

        self.attribute_map = {
            'classifier': 'classifier',
            'pair': 'pair'
        }
        self._classifier = classifier
        self._pair = pair

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classifier(self) -> str:
        """Gets the classifier of this Body.

        classifier to use for alignment. 'randomforest' or 'bert'  # noqa: E501

        :return: The classifier of this Body.
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier: str):
        """Sets the classifier of this Body.

        classifier to use for alignment. 'randomforest' or 'bert'  # noqa: E501

        :param classifier: The classifier of this Body.
        :type classifier: str
        """

        self._classifier = classifier

    @property
    def pair(self) -> DefinitionPair:
        """Gets the pair of this Body.


        :return: The pair of this Body.
        :rtype: DefinitionPair
        """
        return self._pair

    @pair.setter
    def pair(self, pair: DefinitionPair):
        """Sets the pair of this Body.


        :param pair: The pair of this Body.
        :type pair: DefinitionPair
        """

        self._pair = pair
