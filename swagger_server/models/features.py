# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.feature import Feature  # noqa: F401,E501
from swagger_server import util


class Features(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, headword: str=None, pos: str=None, features: List[Feature]=None):  # noqa: E501
        """Features - a model defined in Swagger

        :param headword: The headword of this Features.  # noqa: E501
        :type headword: str
        :param pos: The pos of this Features.  # noqa: E501
        :type pos: str
        :param features: The features of this Features.  # noqa: E501
        :type features: List[Feature]
        """
        self.swagger_types = {
            'headword': str,
            'pos': str,
            'features': List[Feature]
        }

        self.attribute_map = {
            'headword': 'headword',
            'pos': 'pos',
            'features': 'features'
        }
        self._headword = headword
        self._pos = pos
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'Features':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Features of this Features.  # noqa: E501
        :rtype: Features
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headword(self) -> str:
        """Gets the headword of this Features.

        headword of the definition pair  # noqa: E501

        :return: The headword of this Features.
        :rtype: str
        """
        return self._headword

    @headword.setter
    def headword(self, headword: str):
        """Sets the headword of this Features.

        headword of the definition pair  # noqa: E501

        :param headword: The headword of this Features.
        :type headword: str
        """
        if headword is None:
            raise ValueError("Invalid value for `headword`, must not be `None`")  # noqa: E501

        self._headword = headword

    @property
    def pos(self) -> str:
        """Gets the pos of this Features.

        Part-of-speech of the headword  # noqa: E501

        :return: The pos of this Features.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos: str):
        """Sets the pos of this Features.

        Part-of-speech of the headword  # noqa: E501

        :param pos: The pos of this Features.
        :type pos: str
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def features(self) -> List[Feature]:
        """Gets the features of this Features.


        :return: The features of this Features.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features: List[Feature]):
        """Sets the features of this Features.


        :param features: The features of this Features.
        :type features: List[Feature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features
