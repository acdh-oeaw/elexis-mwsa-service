# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DefinitionPair(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, headword: str=None, pos: str=None, lang: str=None, def1: str=None, def2: str=None):  # noqa: E501
        """DefinitionPair - a model defined in Swagger

        :param headword: The headword of this DefinitionPair.  # noqa: E501
        :type headword: str
        :param pos: The pos of this DefinitionPair.  # noqa: E501
        :type pos: str
        :param lang: The lang of this DefinitionPair.  # noqa: E501
        :type lang: str
        :param def1: The def1 of this DefinitionPair.  # noqa: E501
        :type def1: str
        :param def2: The def2 of this DefinitionPair.  # noqa: E501
        :type def2: str
        """
        self.swagger_types = {
            'headword': str,
            'pos': str,
            'lang': str,
            'def1': str,
            'def2': str
        }

        self.attribute_map = {
            'headword': 'headword',
            'pos': 'pos',
            'lang': 'lang',
            'def1': 'def1',
            'def2': 'def2'
        }
        self._headword = headword
        self._pos = pos
        self._lang = lang
        self._def1 = def1
        self._def2 = def2

    @classmethod
    def from_dict(cls, dikt) -> 'DefinitionPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DefinitionPair of this DefinitionPair.  # noqa: E501
        :rtype: DefinitionPair
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headword(self) -> str:
        """Gets the headword of this DefinitionPair.

        headword of the definition pair  # noqa: E501

        :return: The headword of this DefinitionPair.
        :rtype: str
        """
        return self._headword

    @headword.setter
    def headword(self, headword: str):
        """Sets the headword of this DefinitionPair.

        headword of the definition pair  # noqa: E501

        :param headword: The headword of this DefinitionPair.
        :type headword: str
        """
        if headword is None:
            raise ValueError("Invalid value for `headword`, must not be `None`")  # noqa: E501

        self._headword = headword

    @property
    def pos(self) -> str:
        """Gets the pos of this DefinitionPair.

        Part-of-speech of the headword  # noqa: E501

        :return: The pos of this DefinitionPair.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos: str):
        """Sets the pos of this DefinitionPair.

        Part-of-speech of the headword  # noqa: E501

        :param pos: The pos of this DefinitionPair.
        :type pos: str
        """

        self._pos = pos

    @property
    def lang(self) -> str:
        """Gets the lang of this DefinitionPair.

        ISO 639-1 language code of the definition pair  # noqa: E501

        :return: The lang of this DefinitionPair.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """Sets the lang of this DefinitionPair.

        ISO 639-1 language code of the definition pair  # noqa: E501

        :param lang: The lang of this DefinitionPair.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def def1(self) -> str:
        """Gets the def1 of this DefinitionPair.

        first of the definition pair  # noqa: E501

        :return: The def1 of this DefinitionPair.
        :rtype: str
        """
        return self._def1

    @def1.setter
    def def1(self, def1: str):
        """Sets the def1 of this DefinitionPair.

        first of the definition pair  # noqa: E501

        :param def1: The def1 of this DefinitionPair.
        :type def1: str
        """
        if def1 is None:
            raise ValueError("Invalid value for `def1`, must not be `None`")  # noqa: E501

        self._def1 = def1

    @property
    def def2(self) -> str:
        """Gets the def2 of this DefinitionPair.

        second of the definition pair  # noqa: E501

        :return: The def2 of this DefinitionPair.
        :rtype: str
        """
        return self._def2

    @def2.setter
    def def2(self, def2: str):
        """Sets the def2 of this DefinitionPair.

        second of the definition pair  # noqa: E501

        :param def2: The def2 of this DefinitionPair.
        :type def2: str
        """
        if def2 is None:
            raise ValueError("Invalid value for `def2`, must not be `None`")  # noqa: E501

        self._def2 = def2
